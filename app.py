import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

st.set_page_config(page_title="Pharma Tender Analysis", layout="wide")
st.title("üíä H·ªá Th·ªëng L·ªçc & Ph√¢n T√≠ch Danh M·ª•c Th·∫ßu B·ªánh Vi·ªán")

# --- Utility functions ---
def read_excel_dynamic_header(file):
    for header in range(5):
        try:
            df = pd.read_excel(file, header=header)
            if df.columns.str.contains("\w").sum() >= 3:
                return df
        except Exception:
            continue
    return pd.DataFrame()

def format_number(n):
    return f"{int(n):,}" if pd.notna(n) and isinstance(n, (int, float)) else n

# --- Load saved data ---
if 'file2_data' not in st.session_state:
    st.session_state['file2_data'] = None
if 'file3_data' not in st.session_state:
    st.session_state['file3_data'] = None

# --- Sidebar: Choose analysis function ---
option = st.sidebar.radio("Ch·ªçn ch·ª©c nƒÉng", ["L·ªçc danh m·ª•c th·∫ßu", "Ph√¢n t√≠ch danh m·ª•c BV", "Ph√¢n t√≠ch danh m·ª•c tr√∫ng th·∫ßu"])

# --- Upload files ---
st.subheader("üìÅ T·∫£i l√™n file")
file1 = st.file_uploader("T·∫£i l√™n file Danh m·ª•c ch√≠nh (m·ªùi th·∫ßu/tr√∫ng th·∫ßu)", type=["xls", "xlsx"])
file2 = st.file_uploader("(Tu·ª≥ ch·ªçn) Danh s√°ch s·∫£n ph·∫©m c·ªßa c√¥ng ty b·∫°n", type=["xls", "xlsx"])
file3 = st.file_uploader("(Tu·ª≥ ch·ªçn) File ƒë·ªãa b√†n - kh√°ch h√†ng ph·ª• tr√°ch", type=["xls", "xlsx"])

if file2:
    df2 = read_excel_dynamic_header(file2)
    st.session_state['file2_data'] = df2
if file3:
    df3 = pd.read_excel(file3, sheet_name='Chi ti·∫øt tri·ªÉn khai', header=0)
    df3 = df3[df3.iloc[:, 3].isna()]  # B·ªè d√≤ng c√≥ d·ªØ li·ªáu ·ªü c·ªôt D
    st.session_state['file3_data'] = df3

# --- Load main file ---
if file1:
    df1 = read_excel_dynamic_header(file1)
    if df1.empty:
        st.error("‚ùå Kh√¥ng th·ªÉ ƒë·ªçc d·ªØ li·ªáu t·ª´ file Danh m·ª•c ch√≠nh.")
    else:
        df1.columns = df1.columns.str.strip()
        df1['T√™n ho·∫°t ch·∫•t chu·∫©n'] = df1['T√™n ho·∫°t ch·∫•t/ T√™n th√†nh ph·∫ßn c·ªßa thu·ªëc'].fillna(df1.get('T√™n ho·∫°t ch·∫•t', ''))
        df1['T√™n ho·∫°t ch·∫•t chu·∫©n'] = df1['T√™n ho·∫°t ch·∫•t chu·∫©n'].str.strip().str.lower()

        if option == "Ph√¢n t√≠ch danh m·ª•c BV":
            st.subheader("üìä Ph√¢n t√≠ch danh m·ª•c m·ªùi th·∫ßu")
            if 'S·ªë l∆∞·ª£ng' in df1.columns:
                df1['S·ªë l∆∞·ª£ng'] = pd.to_numeric(df1['S·ªë l∆∞·ª£ng'], errors='coerce')
            if 'Gi√° k·∫ø ho·∫°ch' in df1.columns:
                df1['Gi√° k·∫ø ho·∫°ch'] = pd.to_numeric(df1['Gi√° k·∫ø ho·∫°ch'], errors='coerce')
            df1['Tr·ªã gi√° th·∫ßu'] = df1['S·ªë l∆∞·ª£ng'] * df1.get('Gi√° k·∫ø ho·∫°ch', 0)
            df1['Tr·ªã gi√° th·∫ßu'] = df1['Tr·ªã gi√° th·∫ßu'].fillna(0)
            
            top_hoatchat = df1.groupby('T√™n ho·∫°t ch·∫•t chu·∫©n')['S·ªë l∆∞·ª£ng'].sum().nlargest(10).reset_index()
            top_hoatchat['S·ªë l∆∞·ª£ng'] = top_hoatchat['S·ªë l∆∞·ª£ng'].apply(format_number)

            st.markdown("### üî• Top 10 ho·∫°t ch·∫•t theo s·ªë l∆∞·ª£ng")
            st.dataframe(top_hoatchat, use_container_width=True)

        elif option == "Ph√¢n t√≠ch danh m·ª•c tr√∫ng th·∫ßu":
            st.subheader("üè• Ph√¢n t√≠ch danh m·ª•c TR√öNG th·∫ßu")
            if 'Gi√° d·ª± th·∫ßu' in df1.columns:
                df1['Gi√° d·ª± th·∫ßu'] = pd.to_numeric(df1['Gi√° d·ª± th·∫ßu'], errors='coerce')
                df1['Tr·ªã gi√° th·∫ßu'] = df1['S·ªë l∆∞·ª£ng'] * df1['Gi√° d·ª± th·∫ßu']

            if 'Nh√† th·∫ßu tr√∫ng th·∫ßu' in df1.columns:
                top_nhathau = df1.groupby('Nh√† th·∫ßu tr√∫ng th·∫ßu')['Tr·ªã gi√° th·∫ßu'].sum().nlargest(20).reset_index()
                top_nhathau['Tr·ªã gi√° th·∫ßu'] = top_nhathau['Tr·ªã gi√° th·∫ßu'].apply(format_number)
                st.markdown("### üèÜ Top 20 nh√† th·∫ßu tr√∫ng th·∫ßu theo tr·ªã gi√°")
                st.dataframe(top_nhathau, use_container_width=True)

        elif option == "L·ªçc danh m·ª•c th·∫ßu":
            st.subheader("üîç L·ªçc danh m·ª•c theo s·∫£n ph·∫©m c√¥ng ty v√† ƒë·ªãa b√†n")
            if st.session_state['file2_data'] is not None:
                df_sanpham = st.session_state['file2_data']
                df_sanpham.columns = df_sanpham.columns.str.strip()
                ten_sp = df_sanpham.iloc[:, 0].dropna().str.lower().unique()
                df1['T√™n ho·∫°t ch·∫•t chu·∫©n'] = df1['T√™n ho·∫°t ch·∫•t chu·∫©n'].str.lower()
                df_matched = df1[df1['T√™n ho·∫°t ch·∫•t chu·∫©n'].isin(ten_sp)]

                st.success(f"üîé L·ªçc ƒë∆∞·ª£c {len(df_matched)} d√≤ng kh·ªõp v·ªõi danh s√°ch s·∫£n ph·∫©m c√¥ng ty.")
                st.dataframe(df_matched, use_container_width=True)
            else:
                st.warning("üìå B·∫°n c·∫ßn cung c·∫•p File 2 ƒë·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng n√†y.")
