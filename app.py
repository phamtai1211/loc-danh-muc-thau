# app.py - Phi√™n b·∫£n ƒë·∫ßy ƒë·ªß + d·ª± ƒëo√°n theo ƒë·ªãa b√†n
import streamlit as st
import pandas as pd
import os
import matplotlib.pyplot as plt
import base64
import pickle

st.set_page_config(layout="wide")
SAVE_DIR = "saved_data"
os.makedirs(SAVE_DIR, exist_ok=True)

# ==== H√†m h·ªó tr·ª£ ====
def read_excel_auto_header(file):
    df_all = pd.read_excel(file, None)
    if 'Chi ti·∫øt tri·ªÉn khai' in df_all:
        df = df_all['Chi ti·∫øt tri·ªÉn khai']
    else:
        df = list(df_all.values())[0]
    for i in range(5):
        if df.iloc[i].astype(str).str.contains("t√™n ho·∫°t ch·∫•t", case=False).any():
            df.columns = df.iloc[i]
            return df.iloc[i+1:].reset_index(drop=True)
    return df

def standardize_column_names(df):
    rename_map = {}
    for col in df.columns:
        lower_col = str(col).strip().lower()
        if ('ho·∫°t ch·∫•t' in lower_col or 'th√†nh ph·∫ßn' in lower_col) and 't√™n' in lower_col:
            rename_map[col] = 'T√™n ho·∫°t ch·∫•t'
        elif 'n·ªìng ƒë·ªô' in lower_col or 'h√†m l∆∞·ª£ng' in lower_col:
            rename_map[col] = 'N·ªìng ƒë·ªô/H√†m l∆∞·ª£ng'
        elif 'nh√≥m' in lower_col:
            rename_map[col] = 'Nh√≥m thu·ªëc'
        elif 's·ªë l∆∞·ª£ng' in lower_col:
            rename_map[col] = 'S·ªë l∆∞·ª£ng'
        elif 'gi√°' in lower_col and ('ho·∫°ch' in lower_col or 'k·∫ø ho·∫°ch' in lower_col):
            rename_map[col] = 'Gi√° k·∫ø ho·∫°ch'
        elif 'gi√°' in lower_col and ('d·ª±' in lower_col or 'tr√∫ng' in lower_col or 'th·ª±c t·∫ø' in lower_col):
            rename_map[col] = 'Gi√° d·ª± th·∫ßu'
        elif 'ƒë∆∞·ªùng d√πng' in lower_col or 'd·∫°ng b√†o ch·∫ø' in lower_col:
            rename_map[col] = 'ƒê∆∞·ªùng d√πng'
        elif 'nh√† th·∫ßu' in lower_col:
            rename_map[col] = 'Nh√† th·∫ßu tr√∫ng th·∫ßu'
        elif 'ƒë·ªãa b√†n' in lower_col:
            rename_map[col] = 'ƒê·ªãa b√†n'
        elif 'tri·ªÉn khai' in lower_col or 'kh√°ch h√†ng' in lower_col:
            rename_map[col] = 'T√™n Kh√°ch h√†ng ph·ª• tr√°ch tri·ªÉn khai'
    df = df.rename(columns=rename_map)
    return df

def format_nhom_thuoc(value):
    try:
        number = str(value).strip()[-1]
        if number.isdigit():
            return f"Nh√≥m {number}"
    except:
        pass
    return "Kh√¥ng r√µ"

def classify_group(hoatchat):
    hc = str(hoatchat).lower()
    if any(x in hc for x in ['cef', 'peni', 'mycin']): return 'Kh√°ng sinh'
    if any(x in hc for x in ['losartan', 'amlodipin', 'clopidogrel', 'statin']): return 'Tim m·∫°ch'
    if any(x in hc for x in ['metformin', 'insulin']): return 'ƒê√°i th√°o ƒë∆∞·ªùng'
    if any(x in hc for x in ['paracetamol', 'ibu', 'diclofenac']): return 'Gi·∫£m ƒëau'
    if any(x in hc for x in ['omeprazol', 'pantoprazol']): return 'Ti√™u h√≥a'
    return 'Kh√°c'

def save_file(data, name):
    with open(os.path.join(SAVE_DIR, name), 'wb') as f:
        pickle.dump(data, f)

def load_file(name):
    path = os.path.join(SAVE_DIR, name)
    if os.path.exists(path):
        with open(path, 'rb') as f:
            return pickle.load(f)
    return None


# ==== Giao di·ªán ch√≠nh ====
st.title("üíä H·ªá Th·ªëng L·ªçc & Ph√¢n T√≠ch Danh M·ª•c Th·∫ßu")
menu = st.sidebar.radio("Ch·ªçn ch·ª©c nƒÉng", ["L·ªçc danh m·ª•c th·∫ßu", "Ph√¢n t√≠ch danh m·ª•c m·ªùi th·∫ßu", "Ph√¢n t√≠ch danh m·ª•c tr√∫ng th·∫ßu", "D·ª± ƒëo√°n th·∫ßu k·ª≥ t·ªõi"])

if menu == "L·ªçc danh m·ª•c th·∫ßu":
    file1 = st.file_uploader("üì• File 1: Danh m·ª•c th·∫ßu c·ªßa BV", type=['xlsx'], key="file1")
    file2 = st.file_uploader("üì• File 2: Danh s√°ch s·∫£n ph·∫©m c√¥ng ty", type=['xlsx'], key="file2")
    file3 = st.file_uploader("üì• File 3 (tu·ª≥ ch·ªçn): Ph√¢n c√¥ng ƒë·ªãa b√†n", type=['xlsx'], key="file3")

    if file2:
        df2 = read_excel_auto_header(file2)
        df2 = standardize_column_names(df2)
        save_file(df2, "file2.pkl")
    else:
        df2 = load_file("file2.pkl")

    if file3:
        df3 = pd.read_excel(file3, sheet_name='Chi ti·∫øt tri·ªÉn khai')
        df3 = df3[df3.iloc[:, 3].isna()]
        df3 = df3.rename(columns={
            df3.columns[0]: 'Mi·ªÅn', df3.columns[1]: 'V√πng', df3.columns[2]: 'T·ªânh',
            df3.columns[4]: 'B·ªánh vi·ªán/SYT', df3.columns[5]: 'ƒê·ªãa b√†n',
            df3.columns[10]: 'T√™n s·∫£n ph·∫©m', df3.columns[38]: 'T√™n Kh√°ch h√†ng ph·ª• tr√°ch tri·ªÉn khai'
        })
        save_file(df3, "file3.pkl")
    else:
        df3 = load_file("file3.pkl")

    if file1 and df2 is not None:
        df1 = read_excel_auto_header(file1)
        df1 = standardize_column_names(df1)
        df_merge = df1.merge(df2, how='left', on=['T√™n ho·∫°t ch·∫•t', 'N·ªìng ƒë·ªô/H√†m l∆∞·ª£ng', 'Nh√≥m thu·ªëc'])
        if df3 is not None:
            df_merge = df_merge.merge(df3[['T√™n s·∫£n ph·∫©m', 'B·ªánh vi·ªán/SYT', 'ƒê·ªãa b√†n', 'T√™n Kh√°ch h√†ng ph·ª• tr√°ch tri·ªÉn khai']], 
                                      on='T√™n s·∫£n ph·∫©m', how='left')
        st.dataframe(df_merge)
        st.download_button("üì• T·∫£i k·∫øt qu·∫£", df_merge.to_excel(index=False), file_name="ket_qua_loc.xlsx")

elif menu.startswith("Ph√¢n t√≠ch"):
    file = st.file_uploader("üì• File danh m·ª•c m·ªùi/tr√∫ng th·∫ßu", type=['xlsx'])
    if file:
        df = read_excel_auto_header(file)
        df = standardize_column_names(df)
        df['Nh√≥m thu·ªëc'] = df['Nh√≥m thu·ªëc'].apply(format_nhom_thuoc)
        df['Tr·ªã gi√° th·∫ßu'] = df['S·ªë l∆∞·ª£ng'] * df.get('Gi√° d·ª± th·∫ßu', df.get('Gi√° k·∫ø ho·∫°ch', 0))
        df['Nh√≥m ƒëi·ªÅu tr·ªã'] = df['T√™n ho·∫°t ch·∫•t'].apply(classify_group)

        if 'B·ªánh vi·ªán/SYT' not in df.columns and load_file("file3.pkl") is not None:
            df3 = load_file("file3.pkl")
            df = df.merge(df3[['T√™n s·∫£n ph·∫©m', 'Mi·ªÅn', 'V√πng', 'T·ªânh', 'B·ªánh vi·ªán/SYT']], on='T√™n s·∫£n ph·∫©m', how='left')

        st.subheader("üîç H√†m l∆∞·ª£ng ch√≠nh")
        hl = df.groupby(['T√™n ho·∫°t ch·∫•t', 'N·ªìng ƒë·ªô/H√†m l∆∞·ª£ng'])['S·ªë l∆∞·ª£ng'].sum().reset_index()
        hl = hl.sort_values(['T√™n ho·∫°t ch·∫•t', 'S·ªë l∆∞·ª£ng'], ascending=[True, False])
        st.dataframe(hl.groupby('T√™n ho·∫°t ch·∫•t').first().reset_index())

        st.subheader("üìö Nh√≥m ƒëi·ªÅu tr·ªã chi ti√™u cao")
        st.dataframe(df.groupby('Nh√≥m ƒëi·ªÅu tr·ªã')['Tr·ªã gi√° th·∫ßu'].sum().sort_values(ascending=False).reset_index())

        st.subheader("üìà T·ªâ tr·ªçng nh√≥m thu·ªëc")
        tong = df.groupby('T√™n ho·∫°t ch·∫•t')['S·ªë l∆∞·ª£ng'].sum().reset_index(name='Tong')
        df_ti = df.merge(tong, on='T√™n ho·∫°t ch·∫•t')
        df_ti['T·ªâ tr·ªçng (%)'] = df_ti['S·ªë l∆∞·ª£ng'] / df_ti['Tong'] * 100
        st.dataframe(df_ti[['T√™n ho·∫°t ch·∫•t', 'Nh√≥m thu·ªëc', 'S·ªë l∆∞·ª£ng', 'T·ªâ tr·ªçng (%)']])

        st.subheader("üí∞ ∆Ø·ªõc l∆∞·ª£ng doanh thu")
        df['∆Ø·ªõc l∆∞·ª£ng doanh thu'] = df['Tr·ªã gi√° th·∫ßu']
        st.dataframe(df.groupby('T√™n ho·∫°t ch·∫•t')['∆Ø·ªõc l∆∞·ª£ng doanh thu'].sum().sort_values(ascending=False).reset_index())

        st.subheader("üìä Bi·ªÉu ƒë·ªì tr·ªã gi√° theo nh√≥m ƒëi·ªÅu tr·ªã")
        fig, ax = plt.subplots()
        df.groupby('Nh√≥m ƒëi·ªÅu tr·ªã')['Tr·ªã gi√° th·∫ßu'].sum().plot(kind='bar', ax=ax)
        st.pyplot(fig)

        save_file(df, "phan_tich_toan_bo.pkl")
        st.success("‚úÖ ƒê√£ l∆∞u ph√¢n t√≠ch to√†n b·ªô ƒë·ªÉ ph·ª•c v·ª• d·ª± ƒëo√°n")

elif menu == "D·ª± ƒëo√°n th·∫ßu k·ª≥ t·ªõi":
    df_old = load_file("file2.pkl")
    df_all = load_file("phan_tich_toan_bo.pkl")
    if df_old is not None and df_all is not None:
        df_all = standardize_column_names(df_all)
        col1, col2, col3, col4 = st.columns(4)
        mien = col1.selectbox("Mi·ªÅn", sorted(df_all['Mi·ªÅn'].dropna().unique()))
        vung = col2.selectbox("V√πng", sorted(df_all[df_all['Mi·ªÅn'] == mien]['V√πng'].dropna().unique()))
        tinh = col3.selectbox("T·ªânh", sorted(df_all[df_all['V√πng'] == vung]['T·ªânh'].dropna().unique()))
        bv = col4.selectbox("BV/SYT", sorted(df_all[df_all['T·ªânh'] == tinh]['B·ªánh vi·ªán/SYT'].dropna().unique()))

        df_loc = df_all[df_all['B·ªánh vi·ªán/SYT'] == bv]
        df_merge = df_loc.merge(df_old, on=['T√™n ho·∫°t ch·∫•t', 'N·ªìng ƒë·ªô/H√†m l∆∞·ª£ng', 'Nh√≥m thu·ªëc'], how='inner')
        df_suggest = df_merge.groupby(['T√™n ho·∫°t ch·∫•t', 'N·ªìng ƒë·ªô/H√†m l∆∞·ª£ng', 'Nh√≥m thu·ªëc'])['S·ªë l∆∞·ª£ng'].mean().reset_index()
        df_suggest = df_suggest.rename(columns={'S·ªë l∆∞·ª£ng': 'S·ªë l∆∞·ª£ng n√™n chu·∫©n b·ªã'})
        st.subheader(f"üì¶ G·ª£i √Ω chu·∫©n b·ªã th·∫ßu t·∫°i {bv}")
        st.dataframe(df_suggest.sort_values(by='S·ªë l∆∞·ª£ng n√™n chu·∫©n b·ªã', ascending=False))
    else:
        st.warning("‚ö†Ô∏è Ch∆∞a c√≥ ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ d·ª± ƒëo√°n. H√£y ch·∫°y ph√¢n t√≠ch v√† t·∫£i l√™n s·∫£n ph·∫©m c√¥ng ty tr∆∞·ªõc.")
