import streamlit as st
import pandas as pd
import numpy as np

st.set_page_config(layout="wide")
st.title("üß™ H·ªá Th·ªëng L·ªçc & Ph√¢n T√≠ch Danh M·ª•c Th·∫ßu B·ªánh Vi·ªán")

# ========== FUNCTION ==========
def standardize_column_names(df):
    col_map = {}
    for col in df.columns:
        lower_col = col.lower()
        if "ho·∫°t ch·∫•t" in lower_col:
            col_map[col] = "T√™n ho·∫°t ch·∫•t"
        elif "h√†m l∆∞·ª£ng" in lower_col or "n·ªìng ƒë·ªô" in lower_col:
            col_map[col] = "N·ªìng ƒë·ªô/H√†m l∆∞·ª£ng"
        elif "ƒë∆∞·ªùng d√πng" in lower_col:
            col_map[col] = "ƒê∆∞·ªùng d√πng"
        elif "d·∫°ng b√†o ch·∫ø" in lower_col:
            col_map[col] = "D·∫°ng b√†o ch·∫ø"
        elif "ƒë∆°n v·ªã" in lower_col and "t√≠nh" in lower_col:
            col_map[col] = "ƒê∆°n v·ªã t√≠nh"
        elif "s·ªë l∆∞·ª£ng" in lower_col:
            col_map[col] = "S·ªë l∆∞·ª£ng"
        elif "gi√° k·∫ø ho·∫°ch" in lower_col:
            col_map[col] = "Gi√° k·∫ø ho·∫°ch"
        elif "gi√° d·ª± th·∫ßu" in lower_col:
            col_map[col] = "Gi√° d·ª± th·∫ßu"
        elif "t√™n s·∫£n ph·∫©m" in lower_col:
            col_map[col] = "T√™n s·∫£n ph·∫©m"
        elif "nh√≥m" in lower_col and "thu·ªëc" in lower_col:
            col_map[col] = "Nh√≥m thu·ªëc"
        elif "t√™n mi·ªÅn" in lower_col:
            col_map[col] = "Mi·ªÅn"
        elif "t√™n v√πng" in lower_col:
            col_map[col] = "V√πng"
        elif "t·ªânh" in lower_col:
            col_map[col] = "T·ªânh"
        elif "b·ªánh vi·ªán" in lower_col or "s·ªü y t·∫ø" in lower_col:
            col_map[col] = "BV/SYT"
        elif "t√™n s·∫£n ph·∫©m" in lower_col:
            col_map[col] = "T√™n s·∫£n ph·∫©m"
        elif "t√™n kh√°ch h√†ng" in lower_col:
            col_map[col] = "T√™n kh√°ch h√†ng ph·ª• tr√°ch"
        elif "ƒë·ªãa b√†n" in lower_col:
            col_map[col] = "ƒê·ªãa b√†n"
    df.rename(columns=col_map, inplace=True)
    return df

# ========== FILE INPUT ==========
st.markdown("#### üìÅ File 1: Danh m·ª•c ch√≠nh m·ªùi th·∫ßu (DM)")
file1 = st.file_uploader("T·∫£i l√™n file Danh m·ª•c m·ªùi th·∫ßu c·ªßa BV", type=["xlsx"], key="file1")

st.markdown("#### üìÅ File 2: Danh m·ª•c s·∫£n ph·∫©m c√¥ng ty")
file2 = st.file_uploader("T·∫£i l√™n file Danh m·ª•c s·∫£n ph·∫©m n·ªôi b·ªô c√¥ng ty", type=["xlsx"], key="file2")

st.markdown("#### üìÅ File 3: ƒê·ªãa b√†n & Kh√°ch h√†ng ph·ª• tr√°ch")
file3 = st.file_uploader("T·∫£i l√™n file Th√¥ng tin tri·ªÉn khai (ƒê·ªãa b√†n, kh√°ch h√†ng ph·ª• tr√°ch)", type=["xlsx"], key="file3")

# ========== LOAD & CLEAN ==========
if file1 and file2:
    df1 = pd.read_excel(file1)
    df2 = pd.read_excel(file2)
    df1 = standardize_column_names(df1)
    df2 = standardize_column_names(df2)

    # N·∫øu c√≥ file 3
    if file3:
        df3 = pd.read_excel(file3, sheet_name="Chi ti·∫øt tri·ªÉn khai", header=0)
        df3 = standardize_column_names(df3)
        df3 = df3[df3["BV/SYT"].notna() & ~df3["BV/SYT"].astype(str).str.strip().eq("")]

        mien_list = df3["Mi·ªÅn"].dropna().unique().tolist()
        mien = st.selectbox("Ch·ªçn Mi·ªÅn", mien_list)

        vung_list = df3[df3["Mi·ªÅn"] == mien]["V√πng"].dropna().unique().tolist()
        vung = st.selectbox("Ch·ªçn V√πng", vung_list)

        tinh_list = df3[(df3["Mi·ªÅn"] == mien) & (df3["V√πng"] == vung)]["T·ªânh"].dropna().unique().tolist()
        tinh = st.selectbox("Ch·ªçn T·ªânh", tinh_list)

        bvsyt_list = df3[(df3["Mi·ªÅn"] == mien) & (df3["V√πng"] == vung) & (df3["T·ªânh"] == tinh)]["BV/SYT"].dropna().unique().tolist()
        bvsyt = st.selectbox("Ch·ªçn SYT/BV", bvsyt_list)

        sp_list = df3[df3["BV/SYT"] == bvsyt]["T√™n s·∫£n ph·∫©m"].dropna().unique().tolist()
        df_filtered = df2[df2["T√™n s·∫£n ph·∫©m"].isin(sp_list)]
    else:
        df_filtered = df2.copy()

    # ========== L·ªåC D·ªÆ LI·ªÜU ==========
    df_filtered["T√™n ho·∫°t ch·∫•t"] = df_filtered["T√™n ho·∫°t ch·∫•t"].str.strip().str.lower()
    df1["T√™n ho·∫°t ch·∫•t"] = df1["T√™n ho·∫°t ch·∫•t"].str.strip().str.lower()

    # Match ch√≠nh x√°c h∆°n: theo ho·∫°t ch·∫•t, n·ªìng ƒë·ªô, nh√≥m
    merge_cols = ["T√™n ho·∫°t ch·∫•t"]
    for col in ["N·ªìng ƒë·ªô/H√†m l∆∞·ª£ng", "Nh√≥m thu·ªëc"]:
        if col in df1.columns and col in df_filtered.columns:
            merge_cols.append(col)

    df_result = df1.merge(df_filtered[merge_cols], on=merge_cols, how="inner")

    # ========== T√çNH TR·ªä GI√Å ==========
    price_col = "Gi√° d·ª± th·∫ßu" if "Gi√° d·ª± th·∫ßu" in df1.columns else "Gi√° k·∫ø ho·∫°ch"
    df_result["Tr·ªã gi√° th·∫ßu"] = df_result["S·ªë l∆∞·ª£ng"] * df_result.get(price_col, 0)
    df_result["Tr·ªã gi√° th·∫ßu"] = df_result["Tr·ªã gi√° th·∫ßu"].fillna(0)

    # ========== HI·ªÇN TH·ªä ==========
    st.markdown("### üîç L·ªçc Danh m·ª•c c√≥ th·ªÉ tham gia")
    st.success(f"‚úÖ L·ªçc ƒë∆∞·ª£c {len(df_result):,} d√≤ng ph√π h·ª£p t·∫°i BV ƒë√£ ch·ªçn")
    st.dataframe(df_result, use_container_width=True)

else:
    st.warning("‚ö†Ô∏è Vui l√≤ng t·∫£i l√™n File 1 (DM) v√† File 2 (s·∫£n ph·∫©m c√¥ng ty) ƒë·ªÉ b·∫Øt ƒë·∫ßu.")
