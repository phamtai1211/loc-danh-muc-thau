import streamlit as st
import pandas as pd
import io

st.set_page_config(page_title="L·ªçc & Ph√¢n t√≠ch Th·∫ßu BV", layout="wide")
st.title("üìã H·ªá Th·ªëng L·ªçc & Ph√¢n T√≠ch Danh M·ª•c Th·∫ßu B·ªánh Vi·ªán")

menu = st.sidebar.radio("Ch·ªçn ch·ª©c nƒÉng", ["L·ªçc danh m·ª•c th·∫ßu", "Ph√¢n t√≠ch danh m·ª•c BV"])

if menu == "L·ªçc danh m·ª•c th·∫ßu":
    file1 = st.file_uploader("T·∫£i l√™n file Danh m·ª•c th·∫ßu c·ªßa B·ªánh vi·ªán", type=["xls", "xlsx"], key="file1")
    file2 = st.file_uploader("T·∫£i l√™n file Danh m·ª•c s·∫£n ph·∫©m n·ªôi b·ªô", type=["xls", "xlsx"], key="file2")
    file3 = st.file_uploader("T·∫£i l√™n file Th√¥ng tin tri·ªÉn khai", type=["xls", "xlsx"], key="file3")

    def standardize_columns(df):
        col_map = {}
        for col in df.columns:
            name = col.strip().lower()
            if 't√™n ho·∫°t ch·∫•t' in name:
                col_map[col] = 'T√™n ho·∫°t ch·∫•t'
            elif 'n·ªìng ƒë·ªô' in name and 'h√†m l∆∞·ª£ng' in name:
                col_map[col] = 'N·ªìng ƒë·ªô/H√†m l∆∞·ª£ng'
            elif 'nh√≥m' in name:
                col_map[col] = 'Nh√≥m thu·ªëc'
        return df.rename(columns=col_map)

    if file1 and file2 and file3:
        try:
            df1 = pd.read_excel(file1)
            df2 = pd.read_excel(file2)
            df3 = pd.read_excel(file3)

            df1 = standardize_columns(df1)
            df2 = standardize_columns(df2)

            keys = ['T√™n ho·∫°t ch·∫•t', 'N·ªìng ƒë·ªô/H√†m l∆∞·ª£ng', 'Nh√≥m thu·ªëc']
            for df in [df1, df2]:
                for col in keys:
                    df[col] = df[col].astype(str).str.strip().str.lower()
            for df in [df1, df2]:
                df['Nh√≥m thu·ªëc'] = df['Nh√≥m thu·ªëc'].str.extract(r'(\d)$')[0]

            merged_df = pd.merge(df1, df2[keys + ['T√™n s·∫£n ph·∫©m']], on=keys, how='inner')
            df3['T√™n s·∫£n ph·∫©m'] = df3['T√™n s·∫£n ph·∫©m'].astype(str).str.strip().str.lower()
            merged_df['T√™n s·∫£n ph·∫©m'] = merged_df['T√™n s·∫£n ph·∫©m'].astype(str).str.strip().str.lower()
            final_df = pd.merge(merged_df, df3, on='T√™n s·∫£n ph·∫©m', how='left')

            # T√≠nh t·ªâ tr·ªçng nh√≥m
            tong_theo_hoatchat_hamluong = (
                df1.groupby(['T√™n ho·∫°t ch·∫•t', 'N·ªìng ƒë·ªô/H√†m l∆∞·ª£ng'])['S·ªë l∆∞·ª£ng'].sum().reset_index()
                .rename(columns={'S·ªë l∆∞·ª£ng': 'T·ªïng SL c√πng ho·∫°t ch·∫•t-h√†m l∆∞·ª£ng'})
            )
            final_df = pd.merge(final_df, tong_theo_hoatchat_hamluong, on=['T√™n ho·∫°t ch·∫•t', 'N·ªìng ƒë·ªô/H√†m l∆∞·ª£ng'], how='left')
            final_df['T·ªâ tr·ªçng nh√≥m (%)'] = round(final_df['S·ªë l∆∞·ª£ng'] / final_df['T·ªïng SL c√πng ho·∫°t ch·∫•t-h√†m l∆∞·ª£ng'] * 100, 2)

            st.success(f"‚úÖ L·ªçc ƒë∆∞·ª£c {len(final_df)} d√≤ng ph√π h·ª£p")
            st.dataframe(final_df)

            output = io.BytesIO()
            with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                final_df.to_excel(writer, index=False, sheet_name='K·∫øt qu·∫£ l·ªçc')
            output.seek(0)
            st.download_button("üì• T·∫£i Excel k·∫øt qu·∫£ l·ªçc", data=output, file_name="danh_muc_tham_du.xlsx")

        except Exception as e:
            st.error(f"‚ùå L·ªói: {e}")
    else:
        st.info("‚¨ÜÔ∏è T·∫£i ƒë·ªß c·∫£ 3 file ƒë·ªÉ l·ªçc d·ªØ li·ªáu")

elif menu == "Ph√¢n t√≠ch danh m·ª•c BV":
    file_dm = st.file_uploader("T·∫£i l√™n file Danh m·ª•c m·ªùi th·∫ßu c·ªßa BV", type=["xls", "xlsx"], key="dmfile")

    if file_dm:
        try:
            df_dm = pd.read_excel(file_dm, sheet_name=0)
            df_dm['Nh√≥m thu·ªëc chu·∫©n'] = df_dm['Nh√≥m thu·ªëc'].astype(str).str.extract(r'(\d)$')[0]
            df_dm['Tr·ªã gi√° th·∫ßu'] = df_dm['S·ªë l∆∞·ª£ng'] * df_dm['Gi√° k·∫ø ho·∫°ch']

            st.subheader("üìä Th·ªëng k√™ nh√≥m thu·ªëc")
            nhom_summary = df_dm.groupby('Nh√≥m thu·ªëc chu·∫©n').agg(SL=('S·ªë l∆∞·ª£ng','sum'), Gi√°=('Tr·ªã gi√° th·∫ßu','sum'))
            st.dataframe(nhom_summary)

            st.subheader("üíä Th·ªëng k√™ d·∫°ng b√†o ch·∫ø")
            dang_summary = df_dm.groupby('D·∫°ng b√†o ch·∫ø').agg(SL=('S·ªë l∆∞·ª£ng','sum'), Gi√°=('Tr·ªã gi√° th·∫ßu','sum'))
            st.dataframe(dang_summary)

            st.subheader("üî• Top 10 ho·∫°t ch·∫•t theo s·ªë l∆∞·ª£ng")
            top10 = df_dm.groupby('T√™n ho·∫°t ch·∫•t').agg(SL=('S·ªë l∆∞·ª£ng','sum')).sort_values(by='SL', ascending=False).head(10)
            st.dataframe(top10)

            st.subheader("üìå Ph√¢n nh√≥m ƒëi·ªÅu tr·ªã")
            def classify_hoatchat(hc):
                hc = str(hc).lower()
                if any(x in hc for x in ['cef','peni','mycin','levo']): return 'Kh√°ng sinh'
                elif any(x in hc for x in ['losartan','amlodipin','pril']): return 'Tim m·∫°ch'
                elif any(x in hc for x in ['metformin','insulin']): return 'ƒê√°i th√°o ƒë∆∞·ªùng'
                elif any(x in hc for x in ['paracetamol','ibu','meloxi']): return 'Gi·∫£m ƒëau'
                elif any(x in hc for x in ['pantoprazol','omeprazol']): return 'Ti√™u h√≥a'
                elif any(x in hc for x in ['cisplatin','doxo']): return 'Ung th∆∞'
                else: return 'Kh√°c'

            df_dm['Nh√≥m ƒëi·ªÅu tr·ªã'] = df_dm['T√™n ho·∫°t ch·∫•t'].apply(classify_hoatchat)
            group_dt = df_dm.groupby('Nh√≥m ƒëi·ªÅu tr·ªã').agg(SL=('S·ªë l∆∞·ª£ng','sum'), Gi√°=('Tr·ªã gi√° th·∫ßu','sum')).sort_values(by='Gi√°', ascending=False)
            st.dataframe(group_dt)

        except Exception as e:
            st.error(f"‚ùå L·ªói khi x·ª≠ l√Ω: {e}")
    else:
        st.info("‚¨ÜÔ∏è T·∫£i l√™n file danh m·ª•c th·∫ßu b·ªánh vi·ªán ƒë·ªÉ b·∫Øt ƒë·∫ßu ph√¢n t√≠ch.")
