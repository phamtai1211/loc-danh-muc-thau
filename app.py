import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

st.set_page_config(page_title="Pharma Tender Analysis", layout="wide")
st.title("üíä H·ªá Th·ªëng L·ªçc & Ph√¢n T√≠ch Danh M·ª•c Th·∫ßu B·ªánh Vi·ªán")

# -------------------- H√ÄM TI·ªÜN √çCH --------------------
@st.cache_data
def read_excel_dynamic_header(file):
    for header in range(5):
        try:
            df = pd.read_excel(file, header=header)
            if df.columns.str.contains("\w").sum() >= 3:
                return df
        except Exception:
            continue
    return pd.DataFrame()

def format_number(n):
    try:
        return f"{int(n):,}"
    except:
        return n

def extract_group(value):
    if pd.isna(value): return ""
    value = str(value).strip().lower()
    for g in ["1", "2", "3", "4", "5"]:
        if g in value:
            return f"Nh√≥m {g}"
    return "Kh√°c"

# -------------------- KH·ªûI T·∫†O SESSION --------------------
if 'file2_data' not in st.session_state:
    st.session_state['file2_data'] = None
if 'file3_data' not in st.session_state:
    st.session_state['file3_data'] = None

# -------------------- T·∫¢I FILE --------------------
st.sidebar.header("üîß Ch·ªçn ch·ª©c nƒÉng")
option = st.sidebar.radio("", ["L·ªçc danh m·ª•c th·∫ßu", "Ph√¢n t√≠ch danh m·ª•c BV", "Ph√¢n t√≠ch danh m·ª•c tr√∫ng th·∫ßu"])

file1 = st.file_uploader("üìÇ File 1: Danh m·ª•c ch√≠nh (m·ªùi/tr√∫ng th·∫ßu)", type=["xls", "xlsx"])
file2 = st.file_uploader("üìÇ File 2: S·∫£n ph·∫©m n·ªôi b·ªô c√¥ng ty", type=["xls", "xlsx"])
file3 = st.file_uploader("üìÇ File 3: ƒê·ªãa b√†n & Kh√°ch h√†ng ph·ª• tr√°ch", type=["xls", "xlsx"])

if file2:
    df2 = read_excel_dynamic_header(file2)
    st.session_state['file2_data'] = df2
if file3:
    df3 = pd.read_excel(file3, sheet_name='Chi ti·∫øt tri·ªÉn khai', header=0)
    df3 = df3[df3.iloc[:, 3].isna()]
    st.session_state['file3_data'] = df3

# -------------------- ƒê·ªåC FILE CH√çNH --------------------
if file1:
    df1 = read_excel_dynamic_header(file1)
    df1.columns = df1.columns.str.strip()
    if 'T√™n ho·∫°t ch·∫•t' not in df1.columns:
        match_col = [col for col in df1.columns if "t√™n ho·∫°t ch·∫•t" in col.lower() or "th√†nh ph·∫ßn" in col.lower()]
        if match_col:
            df1.rename(columns={match_col[0]: 'T√™n ho·∫°t ch·∫•t'}, inplace=True)
    if 'N·ªìng ƒë·ªô/h√†m l∆∞·ª£ng' not in df1.columns:
        match_col = [col for col in df1.columns if "h√†m l∆∞·ª£ng" in col.lower()]
        if match_col:
            df1.rename(columns={match_col[0]: 'N·ªìng ƒë·ªô/h√†m l∆∞·ª£ng'}, inplace=True)
    if 'Nh√≥m thu·ªëc' not in df1.columns:
        match_col = [col for col in df1.columns if "nh√≥m" in col.lower()]
        if match_col:
            df1.rename(columns={match_col[0]: 'Nh√≥m thu·ªëc'}, inplace=True)

    df1['Nh√≥m thu·ªëc'] = df1['Nh√≥m thu·ªëc'].apply(extract_group)
    df1['S·ªë l∆∞·ª£ng'] = pd.to_numeric(df1.get('S·ªë l∆∞·ª£ng', 0), errors='coerce')

    if option == "Ph√¢n t√≠ch danh m·ª•c BV":
        st.header("üìä Ph√¢n t√≠ch Danh m·ª•c m·ªùi th·∫ßu")
        df1['Gi√° k·∫ø ho·∫°ch'] = pd.to_numeric(df1.get('Gi√° k·∫ø ho·∫°ch', 0), errors='coerce')
        df1['Tr·ªã gi√° th·∫ßu'] = df1['S·ªë l∆∞·ª£ng'] * df1['Gi√° k·∫ø ho·∫°ch']

        top10 = df1.groupby('T√™n ho·∫°t ch·∫•t')['S·ªë l∆∞·ª£ng'].sum().nlargest(10).reset_index()
        top10['S·ªë l∆∞·ª£ng'] = top10['S·ªë l∆∞·ª£ng'].apply(format_number)
        st.subheader("üî• Top 10 ho·∫°t ch·∫•t theo s·ªë l∆∞·ª£ng")
        st.dataframe(top10)

        group_ratio = df1.groupby('Nh√≥m thu·ªëc')['S·ªë l∆∞·ª£ng'].sum()
        total_qty = group_ratio.sum()
        df_ratio = (group_ratio / total_qty * 100).round(2).reset_index(name='% S·ªë l∆∞·ª£ng')
        st.subheader("üìå T·ªâ tr·ªçng theo Nh√≥m thu·ªëc")
        st.dataframe(df_ratio)

    elif option == "Ph√¢n t√≠ch danh m·ª•c tr√∫ng th·∫ßu":
        st.header("üè• Ph√¢n t√≠ch Danh m·ª•c TR√öNG th·∫ßu")
        df1['Gi√° d·ª± th·∫ßu'] = pd.to_numeric(df1.get('Gi√° d·ª± th·∫ßu', 0), errors='coerce')
        df1['Tr·ªã gi√° th·∫ßu'] = df1['S·ªë l∆∞·ª£ng'] * df1['Gi√° d·ª± th·∫ßu']
        top20 = df1.groupby('Nh√† th·∫ßu tr√∫ng th·∫ßu')['Tr·ªã gi√° th·∫ßu'].sum().nlargest(20).reset_index()
        top20['Tr·ªã gi√° th·∫ßu'] = top20['Tr·ªã gi√° th·∫ßu'].apply(format_number)
        st.dataframe(top20)

    elif option == "L·ªçc danh m·ª•c th·∫ßu":
        st.header("üîç L·ªçc Danh m·ª•c c√≥ th·ªÉ tham gia")
        df2 = st.session_state['file2_data']
        df3 = st.session_state['file3_data']

        if df2 is not None:
            df2.columns = df2.columns.str.strip()
            if 'T√™n ho·∫°t ch·∫•t' not in df2.columns:
                df2.rename(columns={df2.columns[0]: 'T√™n ho·∫°t ch·∫•t'}, inplace=True)
            df_merged = df1.merge(df2[['T√™n ho·∫°t ch·∫•t']], on='T√™n ho·∫°t ch·∫•t', how='left', indicator=True)
            df_result = df_merged[df_merged['_merge'] == 'both'].copy()
            df_result.drop(columns=['_merge'], inplace=True)

            if df3 is not None:
                df3.columns = df3.columns.str.strip()
                df3.rename(columns={
                    df3.columns[0]: 'Mi·ªÅn',
                    df3.columns[1]: 'V√πng',
                    df3.columns[2]: 'T·ªânh',
                    df3.columns[4]: 'BV/SYT',
                    df3.columns[5]: 'ƒê·ªãa b√†n',
                    df3.columns[10]: 'T√™n s·∫£n ph·∫©m',
                    df3.columns[38]: 'T√™n Kh√°ch h√†ng ph·ª• tr√°ch'
                }, inplace=True)

                # Giao di·ªán l·ªçc theo Mi·ªÅn - V√πng - T·ªânh - BV
                mien = st.selectbox("Ch·ªçn Mi·ªÅn", df3['Mi·ªÅn'].dropna().unique())
                vung = st.selectbox("Ch·ªçn V√πng", df3[df3['Mi·ªÅn'] == mien]['V√πng'].dropna().unique())
                tinh = st.selectbox("Ch·ªçn T·ªânh", df3[df3['V√πng'] == vung]['T·ªânh'].dropna().unique())
                bvsyt = st.selectbox("Ch·ªçn SYT/BV", df3[df3['T·ªânh'] == tinh]['BV/SYT'].dropna().unique())

                df3_filtered = df3[df3['BV/SYT'] == bvsyt]
                df_final = df_result.merge(df3_filtered[['T√™n s·∫£n ph·∫©m', 'ƒê·ªãa b√†n', 'T√™n Kh√°ch h√†ng ph·ª• tr√°ch']],
                                           left_on='T√™n ho·∫°t ch·∫•t', right_on='T√™n s·∫£n ph·∫©m', how='left')
                st.success(f"‚úÖ L·ªçc ƒë∆∞·ª£c {len(df_final)} d√≤ng ph√π h·ª£p t·∫°i {bvsyt}")
                st.dataframe(df_final)
            else:
                st.warning("‚ö†Ô∏è B·∫°n ch∆∞a t·∫£i File 3 n√™n kh√¥ng c√≥ th√¥ng tin ƒë·ªãa b√†n & kh√°ch h√†ng ph·ª• tr√°ch.")
                st.dataframe(df_result)
        else:
            st.warning("‚ö†Ô∏è Vui l√≤ng t·∫£i File 2 (s·∫£n ph·∫©m c√¥ng ty) ƒë·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng l·ªçc.")
