import streamlit as st
import pandas as pd
import os
from io import BytesIO

st.set_page_config(layout="wide")
st.title("üß™ H·ªá Th·ªëng L·ªçc & Ph√¢n T√≠ch Danh M·ª•c Th·∫ßu B·ªánh Vi·ªán")

# ======= FUNCTION ==========
def format_number(n):
    try:
        return f"{int(n):,}"
    except:
        return n

def load_excel_file(uploaded_file):
    if uploaded_file is not None:
        try:
            return pd.read_excel(uploaded_file)
        except:
            st.error("‚ùå File kh√¥ng h·ª£p l·ªá ho·∫∑c b·ªã l·ªói!")
            return None
    return None

def standardize_column_name(col):
    if pd.isna(col):
        return col
    col = str(col).strip().lower()
    if 'ho·∫°t ch·∫•t' in col:
        return 'T√™n ho·∫°t ch·∫•t'
    elif 'h√†m l∆∞·ª£ng' in col:
        return 'N·ªìng ƒë·ªô/H√†m l∆∞·ª£ng'
    elif 'ƒë∆∞·ªùng d√πng' in col:
        return 'ƒê∆∞·ªùng d√πng'
    elif 'nh√≥m' in col:
        return 'Nh√≥m thu·ªëc'
    elif 's·ªë l∆∞·ª£ng' in col:
        return 'S·ªë l∆∞·ª£ng'
    elif 'gi√° k·∫ø ho·∫°ch' in col.lower():
        return 'Gi√° k·∫ø ho·∫°ch'
    elif 'gi√° d·ª± th·∫ßu' in col.lower():
        return 'Gi√° d·ª± th·∫ßu'
    elif 't√™n s·∫£n ph·∫©m' in col:
        return 'T√™n s·∫£n ph·∫©m'
    return col

# ========== UPLOAD FILES ==========
col1, col2, col3 = st.columns(3)

with col1:
    file1 = st.file_uploader("üìÅ File 1: Danh m·ª•c ch√≠nh m·ªùi th·∫ßu (DM)", type=['xlsx'], key="file1")
    df1 = load_excel_file(file1)
    if df1 is not None:
        df1.columns = [standardize_column_name(c) for c in df1.columns]

with col2:
    file2 = st.file_uploader("üìÅ File 2: Danh m·ª•c s·∫£n ph·∫©m c√¥ng ty", type=['xlsx'], key="file2")
    df2 = load_excel_file(file2)
    if df2 is not None:
        df2.columns = [standardize_column_name(c) for c in df2.columns]

with col3:
    file3 = st.file_uploader("üìÅ File 3: ƒê·ªãa b√†n & Kh√°ch h√†ng ph·ª• tr√°ch", type=['xlsx'], key="file3")
    df3 = load_excel_file(file3)
    if df3 is not None:
        try:
            df3 = pd.read_excel(file3, sheet_name="Chi ti·∫øt tri·ªÉn khai", header=0)
        except:
            df3 = None

# ========== L·ªåC DANH M·ª§C ==========
st.subheader("üîç L·ªçc Danh m·ª•c c√≥ th·ªÉ tham gia")

if df1 is not None and df2 is not None:
    # N·∫øu c√≥ file 3 => l·ªçc theo ƒë·ªãa b√†n
    if df3 is not None:
        df3.columns = [str(c).strip() for c in df3.columns]

        mien = st.selectbox("Ch·ªçn Mi·ªÅn", sorted(df3['Mi·ªÅn'].dropna().unique()))
        vung = st.selectbox("Ch·ªçn V√πng", sorted(df3[df3['Mi·ªÅn']==mien]['V√πng'].dropna().unique()))
        tinh = st.selectbox("Ch·ªçn T·ªânh", sorted(df3[df3['V√πng']==vung]['T·ªânh'].dropna().unique()))
        choices_bv = df3[df3['T·ªânh'] == tinh]['B·ªánh vi·ªán/SYT'].dropna().unique()
        tenbv = st.selectbox("Ch·ªçn SYT/BV", sorted(choices_bv))

        df3_bv = df3[df3['B·ªánh vi·ªán/SYT'] == tenbv]
        san_pham_cua_bv = df3_bv['T√™n s·∫£n ph·∫©m'].dropna().unique()
        df2_filtered = df2[df2['T√™n s·∫£n ph·∫©m'].isin(san_pham_cua_bv)]
    else:
        df2_filtered = df2.copy()

    if not df2_filtered.empty:
        if 'T√™n s·∫£n ph·∫©m' in df1.columns and 'T√™n s·∫£n ph·∫©m' in df2_filtered.columns:
            df_result = df1.merge(df2_filtered[['T√™n s·∫£n ph·∫©m']], on="T√™n s·∫£n ph·∫©m", how="inner")
        elif 'T√™n ho·∫°t ch·∫•t' in df1.columns and 'T√™n ho·∫°t ch·∫•t' in df2_filtered.columns:
            df_result = df1.merge(df2_filtered[['T√™n ho·∫°t ch·∫•t']], on="T√™n ho·∫°t ch·∫•t", how="inner")
        else:
            st.error("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y c·ªôt 'T√™n s·∫£n ph·∫©m' ho·∫∑c 'T√™n ho·∫°t ch·∫•t' ƒë·ªÉ ƒë·ªëi chi·∫øu!")
            df_result = pd.DataFrame()

        if not df_result.empty:
            if 'Gi√° d·ª± th·∫ßu' in df_result.columns:
                df_result['Tr·ªã gi√° th·∫ßu'] = df_result['S·ªë l∆∞·ª£ng'] * df_result.get('Gi√° d·ª± th·∫ßu', 0)
            else:
                df_result['Tr·ªã gi√° th·∫ßu'] = df_result['S·ªë l∆∞·ª£ng'] * df_result.get('Gi√° k·∫ø ho·∫°ch', 0)

            st.success(f"‚úÖ L·ªçc ƒë∆∞·ª£c {len(df_result):,} d√≤ng ph√π h·ª£p t·∫°i BV ƒë√£ ch·ªçn")
            st.dataframe(df_result.head(30).style.format(format_number))
        else:
            st.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ph√π h·ª£p ƒë·ªÉ l·ªçc!")
    else:
        st.warning("‚ö†Ô∏è File 2 kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p")
