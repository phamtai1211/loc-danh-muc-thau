# loc_thau_thuoc_app.py

import streamlit as st
import pandas as pd
import numpy as np
from io import BytesIO
import re

st.set_page_config(page_title="L·ªçc danh m·ª•c th·∫ßu thu·ªëc b·ªánh vi·ªán", layout="wide")
st.title("L·ªçc danh m·ª•c th·∫ßu thu·ªëc b·ªánh vi·ªán")

# ---------- Utilities ----------
def normalize_colname(name):
    name = name.lower().strip()
    name = re.sub(r"[\s\-_/]+", " ", name)
    return name

def fuzzy_find_column(columns, keywords):
    columns_norm = {col: normalize_colname(col) for col in columns}
    for key in keywords:
        for col, norm in columns_norm.items():
            if key in norm:
                return col
    return None

# ---------- File Uploads ----------
st.sidebar.header("1. T·∫£i c√°c file d·ªØ li·ªáu")
file2 = st.sidebar.file_uploader("T·∫£i file 2 - D·ªØ li·ªáu thu·ªëc c√¥ng ty", type="xlsx", key="f2")
file3 = st.sidebar.file_uploader("T·∫£i file 3 - File ph√¢n khai tri·ªÉn khai", type="xlsx", key="f3")
file1 = st.sidebar.file_uploader("T·∫£i file 1 - Danh m·ª•c th·∫ßu t·ª´ BV/SYT", type="xlsx", key="f1")

# ---------- Read Files ----------
data2, data3, data1_main = None, None, None
if file2:
    data2 = pd.read_excel(file2)
if file3:
    data3 = pd.read_excel(file3, sheet_name="Chi ti·∫øt tri·ªÉn khai")

# UI l·ª±a ch·ªçn b·ªánh vi·ªán t·ª´ file 3
if data3 is not None:
    mien_list = sorted(data3["Mi·ªÅn"].dropna().unique())
    mien = st.selectbox("Ch·ªçn Mi·ªÅn", mien_list)
    vung_list = sorted(data3[data3["Mi·ªÅn"] == mien]["V√πng"].dropna().unique())
    vung = st.selectbox("Ch·ªçn V√πng", vung_list)
    tinh_list = sorted(data3[data3["V√πng"] == vung]["T·ªânh"].dropna().unique())
    tinh = st.selectbox("Ch·ªçn T·ªânh", tinh_list)
    bv_list = sorted(data3[data3["T·ªânh"] == tinh]["B·ªánh vi·ªán/SYT"].dropna().unique())
    bv = st.selectbox("Ch·ªçn B·ªánh vi·ªán/SYT", bv_list)

# ---------- X·ª≠ l√Ω File 1 ----------
if file1:
    sheet_all = pd.read_excel(file1, sheet_name=None)
    selected_sheet = max(sheet_all.items(), key=lambda x: x[1].shape[1])[0]
    data1 = sheet_all[selected_sheet].copy()

    # T√¨m c·ªôt ph√π h·ª£p theo key
    col_hoatchat = fuzzy_find_column(data1.columns, ["hoat chat", "ten thanh phan"])
    col_hamluong = fuzzy_find_column(data1.columns, ["ham luong", "nong do"])
    col_nhom = fuzzy_find_column(data1.columns, ["nhom", "nhom thuoc"])

    if col_hoatchat and col_hamluong and col_nhom and data2 is not None:
        df1 = data1.rename(columns={
            col_hoatchat: "T√™n ho·∫°t ch·∫•t",
            col_hamluong: "H√†m l∆∞·ª£ng",
            col_nhom: "Nh√≥m"
        })
        df2 = data2.rename(columns=lambda x: x.strip())

        # Chu·∫©n h√≥a nh√≥m ch·ªâ l·∫•y s·ªë cu·ªëi
        def clean_nhom(val):
            if pd.isna(val): return ""
            digits = re.findall(r"\d", str(val))
            return digits[-1] if digits else ""

        df1["Nh√≥m"] = df1["Nh√≥m"].apply(clean_nhom)
        df2["Nh√≥m"] = df2["Nh√≥m"].apply(clean_nhom)

        # So s√°nh 3 c·ªôt
        merge_df = df1.merge(
            df2,
            left_on=["T√™n ho·∫°t ch·∫•t", "H√†m l∆∞·ª£ng", "Nh√≥m"],
            right_on=["T√™n ho·∫°t ch·∫•t", "N·ªìng ƒë·ªô/h√†m l∆∞·ª£ng", "Nh√≥m"],
            how="left"
        )

        # N·∫øu c√≥ file3 v√† ch·ªçn b·ªánh vi·ªán ‚Üí th√™m d·ªØ li·ªáu tri·ªÉn khai
        if data3 is not None:
            subset3 = data3[(data3["Mi·ªÅn"] == mien) & (data3["V√πng"] == vung) &
                            (data3["T·ªânh"] == tinh) & (data3["B·ªánh vi·ªán/SYT"] == bv)]
            merge_df = merge_df.merge(
                subset3[["T√™n s·∫£n ph·∫©m", "ƒê·ªãa b√†n", "T√™n Kh√°ch h√†ng ph·ª• tr√°ch tri·ªÉn khai"]],
                on="T√™n s·∫£n ph·∫©m",
                how="left"
            )

        # Hi·ªÉn th·ªã b·∫£ng r√∫t g·ªçn (ch·ªâ c√°c d√≤ng c√≥ T√™n s·∫£n ph·∫©m)
        df_show = merge_df[~merge_df["T√™n s·∫£n ph·∫©m"].isna()]
        st.subheader(f"S·ªë d√≤ng c√≥ th·ªÉ tham gia th·∫ßu: {len(df_show)}")
        st.dataframe(df_show)

        # T·∫£i k·∫øt qu·∫£ ƒë·∫ßy ƒë·ªß
        def convert_df(df):
            output = BytesIO()
            with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                df.to_excel(writer, index=False)
            return output.getvalue()

        result_xlsx = convert_df(merge_df)
        st.download_button(
            label="üì• T·∫£i k·∫øt qu·∫£ ƒë·∫ßy ƒë·ªß (Excel)",
            data=result_xlsx,
            file_name="ket_qua_loc_thau.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
    else:
        st.warning("Kh√¥ng t√¨m ƒë∆∞·ª£c ƒë·ªß 3 c·ªôt c·∫ßn thi·∫øt trong file danh m·ª•c th·∫ßu ho·∫∑c thi·∫øu file c√¥ng ty.")
